// UML State diagram for a library loan, represented in Umple
class DailyMessageBase {
  Integer timeout24Hours = 0;

  state {
    initial {
      // entrypoint
      entry / {
        stateNotify("initial");
      };

      //must be able to advance to any state
      receivedWaitDay -> waitDay;
      receivedEndProtocol -> endProtocol;
    }

    waitDay {
      // wait here until a certain time of day
      entry / {
        stateNotify("waitDay");
      };

      after(timeout24Hours) -> sendDailyMessage;
      receivedEndProtocol -> endProtocol;
    }


    sendDailyMessage {
      entry / {
        // send daily message to participant
        stateNotify("sendDailyMessage");
      } -> waitDay;
    }

    endProtocol {
      // if participant is moved off protocol, or removed
      // then enter inescapable state
      entry / {
        stateNotify("endProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}