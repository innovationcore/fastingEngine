// UML State diagram for CCW Restricted, represented in Umple
class CCW_RestrictedBase
{

  Integer startDeadline = 0;
  Integer startWarnDeadline = 0;
  Integer endDeadline = 0;
  Integer endWarnDeadline = 0;
  Integer endOfEpisodeDeadline = 0;


  state {

    initial {
      entry / {
        // entry point, don't do anything here
        stateNotify("initial");
      };

      //must be able to advance to any state
      receivedWaitStart -> waitStart;
      receivedWarnStartCal -> warnStartCal;
      receivedStartCal -> startcal;
      recievedWarnEndCal -> warnEndCal;
      receivedEndProtocol -> endProtocol;
    }

    waitStart {
      entry / {
        // wait here until a startcal text is received
        stateNotify("waitStart");
      };

      receivedStartCal -> startcal;
      receivedDayOff -> dayOffWait;
      after(startWarnDeadline) -> warnStartCal;
      receivedEndProtocol -> endProtocol;
    }

    dayOffWait {
      entry / {
        // receive "dayoff"
        stateNotify("dayOffWait");
      } -> waitStart;
    }

     warnStartCal {
      entry / {
        // send a reminder message at a certain time
        stateNotify("warnStartCal");
      };

      receivedStartCal -> startcal;
      receivedDayOff -> dayOffWarn;
      after(startDeadline) -> missedStartCal;
      receivedEndProtocol -> endProtocol;

    }

    dayOffWarn {
      // receive "dayoff"
      entry / {
        stateNotify("dayOffWarn");
      } -> warnStartCal;
    }

    startcal {
      entry / {
        // receive additional startcals and update
        // starting time, also receive endcal
        stateNotify("startcal");
      };
      receivedStartCal -> startcal;
      receivedEndCal -> endcal;
      receivedDayOff -> dayOffStartCal;
      after(endWarnDeadline) -> warnEndCal;
      receivedEndProtocol -> endProtocol;
    }

    dayOffStartCal {
      // receive "dayoff"
      entry / {
        stateNotify("dayOffStartCal");
      } -> startcal;
    }

    missedStartCal {
      entry / {
        // If user doesn't send startcal during the day
        // then send message and wait for restart
        stateNotify("missedStartCal");
      } -> endOfEpisode;
    }

    warnEndCal {
      entry / {
        // send warning message about endcal not being
        // received
        stateNotify("warnEndCal");
      };
      receivedEndCal -> endcal;
      receivedDayOff -> dayOffWarnEndCal;
      after(endDeadline) -> missedEndCal;
      receivedEndProtocol -> endProtocol;
    }

    dayOffWarnEndCal {
      // receive "dayoff"
      entry / {
        stateNotify("dayOffWarnEndCal");
      } -> warnEndCal;
    }


    endcal {
      entry / {
        // receive additional endcal messages and update
        // end time
        stateNotify("endcal");
      } -> endOfEpisode;
    }


    missedEndCal {
      entry / {
        // If user doesn't send endcal/stopcal
        // during the day then send message and wait for
        // restart
        stateNotify("missedEndCal");
      } -> endOfEpisode;

    }


    endOfEpisode {
      // Normal End state
      entry / {
        stateNotify("endOfEpisode");
      };

      after(endOfEpisodeDeadline) -> resetEpisodeVariables;
      receivedDayOff -> dayOffEndOfEpisode;
      receivedEndCal -> endcal;
      receivedEndProtocol -> endProtocol;
    }

    dayOffEndOfEpisode {
      // receive "dayoff"
      entry / {
        stateNotify("dayOffEndOfEpisode");
      } -> endOfEpisode;
    }

    resetEpisodeVariables {
      entry / {
        // resets dayoff and other variables for the next
        // day
        stateNotify("resetEpisodeVariables");
      } -> waitStart;
    }

    endProtocol {
      // if participant is moved off protocol, or removed
      // then enter inescapable state
      entry / {
        stateNotify("endProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}