// UML State diagram for a library loan, represented in Umple
class HPM_WeeklyMessageBase
{
  Integer timeout1Week = 0;


  state {

    initial {
      entry / {
        // entrypoint
        stateNotify("initial");
      };

      //must be able to advance to any state
      receivedWaitWeek -> waitWeek;
      receivedEndProtocol -> endProtocol;
    }

    waitWeek {
      entry / {
        // wait here until a certain time of day on a
        // certain day of the week
        stateNotify("waitWeek");
      };

      after(timeout1Week) -> sendWeeklyMessage;
      receivedEndProtocol -> endProtocol;
    }


    sendWeeklyMessage {
      entry / {
        // send weekly message to participant
        stateNotify("sendWeeklyMessage");
      } -> waitWeek;
    }

    endProtocol {
      // if participant is moved off protocol, or removed
      // then enter inescapable state
      entry / {
        stateNotify("endProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}