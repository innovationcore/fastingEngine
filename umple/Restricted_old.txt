// UML State diagram for a library loan, represented in Umple
class RestrictedBase
{
  Integer fastExpired = {1000*60*60*24*2};
  Integer missedEndCals = 0;

  // Number of ms to the loan becoming due from entry to current state
  Integer deadline = 1209600000; // 2 weeks

  state {
    initial {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("initial");
      };

      receivedStartCal -> startcal;
      receivedDayOff -> dayOff;
    }


    startcal {


      receivedStartCal -> / {
          // Send Error about duplicate start
      } startcal;
      receivedEndCal [endWithinWindow()] -> success;
      receivedEndCal [endAfterEightPM()] -> endAfterEight;
      receivedEndCal [endTooEarly()] -> endTooEarly;
      receivedEndCal [endTooLate()] -> endTooLate;
      after(deadline) -> missedEndCal;

    }

    dayOff {
      entry / {
          //Send message saying you still want start/end
        stateNotify("dayOff");
      };
      receivedStartCal -> dayOffReceivedStartcal;
      after(deadline) -> endOfEpisode;
    }

    dayOffReceivedStartcal {
      entry / {
        // acknowledge
        stateNotify("dayOffReceivedStartcal");
      };

        receivedEndCal -> dayOffReceivedEndCal;
    }

    dayOffReceivedEndCal {
      entry / {
         // acknowledge
        stateNotify("dayOffReceivedEndCal");
      } -> endOfEpisode;

    }


    endAfterEight {
      entry / {
        // Send random message from set
        stateNotify("endAfterEight");
      } -> endOfEpisode;
    }

    endTooEarly {
      entry / {
        // Send random message from set
        stateNotify("endTooEarly");
      } -> endOfEpisode;
    }

    endTooLate {
      entry / {
        // Send random message from set
        stateNotify("endTooLate");
      } -> endOfEpisode;
    }

    missedEndCal {
      entry / {
        setMissedEndCals(missedEndCals + 1);
        stateNotify("missedEndCal");
      };
      after(deadline) [missedEndCals > 1] -> twoDaysNoEndCals;
      after(deadline) -> reminderMessage;
    }

    twoDaysNoEndCals {
      entry / {
          // Send Special message
        stateNotify("twoDaysNoEndCals");
      } -> endOfEpisode;
    }

    reminderMessage {
      entry / {
        // Send message in morning reminding to end episode
        stateNotify("reminderMessage");
      } -> endOfEpisode;
    }

    success {
      entry / {
        // Send Random success message
        stateNotify("success");
      } -> endOfEpisode;
    }

    endOfEpisode {
      // Normal End state
      entry / {
        stateNotify("endOfEpisode");
      };
    }

  }

  boolean stateNotify(String node) {return true;}

  boolean endWithinWindow() {return true;}
  boolean endAfterEightPM() {return true;}
  boolean endTooEarly() { return true;}
  boolean endTooLate() {return true;}
  int currentTime() {return 1;}

}

namespace -;

class RestrictedBase
{
  position 50 30 109 45;
}