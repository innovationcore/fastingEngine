// UML State diagram for a library loan, represented in Umple
class BaselineBase
{
  Integer timeout24Hours = 0;
  Integer startWarnDeadline = 0;
  Integer endWarnDeadline = 0;


  state {

    initial {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("initial");
      };

      //must be able to advance to any state
      receivedWaitStart -> waitStart;
      receivedWarnStart -> warnStartCal;
      receivedStartCal -> startcal;
      recievedWarnEndCal -> warnEndCal;
    }

    waitStart {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("waitStart");
      };

      receivedStartCal -> startcal;
      after(startWarnDeadline) -> warnStartCal;
      receivedEndProtocol -> endProtocol;
    }

    warnStartCal {
      entry/ {
    	// send a reminder messaage at noon
        stateNotify("warnStartCal");
      };

      receivedStartCal -> startcal;
      after(timeout24Hours) -> timeout24;
    }

    startcal {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("startcal");
      };

        receivedStartCal -> startcal;
        receivedEndCal -> endcal;
        //after(timeout24Hours) -> timeout24;
        after(endWarnDeadline) -> warnEndCal;
        receivedEndProtocol -> endProtocol;
    }

    warnEndCal {
      entry / {
        stateNotify("warnEndCal");
      };
      receivedEndCal -> endcal;
      after(timeout24Hours) -> waitStart;
      receivedEndProtocol -> endProtocol;
    }

    endcal {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("endcal");
      };
        receivedEndCal -> endcal;
        after(timeout24Hours) -> waitStart;
        receivedEndProtocol -> endProtocol;
    }

    timeout24 {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("timeout24");
      } -> waitStart;
    }

    endProtocol {
      // if participant is moved off protocol, or removed then enter inescapable state
      entry / {
        stateNotify("endProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}

namespace -;

class BaselineBase
{
  position 50 30 109 45;
}