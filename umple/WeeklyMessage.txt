// UML State diagram for a library loan, represented in Umple
class WeeklyMessageBase
{
  Integer timeout1Week = 0;


  state {

    initial {
      entry / {
        stateNotify("initial");
      };

      //must be able to advance to any state
      receivedWaitWeek -> waitWeek;
    }

    waitWeek {
      entry / {
        stateNotify("waitWeek");
      };
        
      after(timeout1Week) -> sendWeeklyMessage;
      receivedEndProtocol -> endProtocol;
    }


    sendWeeklyMessage {
      entry / {
        stateNotify("sendWeeklyMessage");
      } -> waitWeek;
    }

    endProtocol {
      // if participant is moved off protocol, or removed then enter inescapable state
      entry / {
        stateNotify("endProtocol");
      };
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}

namespace -;

class WeeklyMessageBase
{
  position 50 30 109 45;
}