// UML State diagram for a library loan, represented in Umple
class RestrictedBase
{

  Integer startDeadline = 0;
  Integer startWarnDeadline = 0;
  Integer endDeadline = 0;
  Integer endWarnDeadline = 0;
  Integer endOfEpisodeDeadline = 0;


  state {

    initial {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("initial");
      };

      //must be able to advance to any state
      receivedWaitStart -> waitStart;
      receivedWarnStartCal -> warnStartCal;
      receivedStartCal -> startcal;
      recievedWarnEndCal -> warnEndCal;
    }

    waitStart {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("waitStart");
      };

      receivedStartCal -> startcal;
      after(startWarnDeadline) -> warnStartCal;
    }

     warnStartCal {
      entry / {
        stateNotify("warnStartCal");
      };

      receivedStartCal -> startcal;
      after(startDeadline) -> missedStartCal;

    }

    startcal {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("startcal");
      };
      receivedStartCal -> / {
          // Send Error about duplicate start
      } startcal;
      receivedEndCal -> endcal;
      after(endWarnDeadline) -> warnEndCal;

    }

    missedStartCal {
      entry / {
        stateNotify("missedStartCal");
      } -> endOfEpisode;

    }

    warnEndCal {
      entry / {
        stateNotify("warnEndCal");
      };
      receivedEndCal -> endcal;
      after(endDeadline) -> missedEndCal;

    }

    endcal {
      entry / {
        // here we need to receive the message to start
        // Possibly send missed fasts messages
        stateNotify("endcal");
      } -> endOfEpisode;

    }


    missedEndCal {
      entry / {
        stateNotify("missedEndCal");
      } -> endOfEpisode;

    }


    endOfEpisode {
      // Normal End state
      entry / {
        stateNotify("endOfEpisode");
      };
      after(endOfEpisodeDeadline) -> waitStart;
    }

  }

  boolean stateNotify(String node) {return true;}
  int currentTime() {return 1;}
}

namespace -;

class RestrictedBase
{
  position 50 30 109 45;
}